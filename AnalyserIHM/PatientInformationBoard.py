import os__author__ = 'user'from PyQt4.QtGui import *from PyQt4.QtCore import *from AnalyserIHM import TitleListWidgetclass PatientInformationBoard(QFrame):    """        This class represent the info board of the vesselFile dataset, which includes the name of the dataset and its        component. We can load datasets' content by right clicking items named "datasetXX".        The view of info board is as follows:        ============        Coronary_CTA        ============        -> dataset00            -> vessel0                ->pointA                    ...            -> vessel1            ...        -> dataset01        ....        ============    """    def __init__(self, parent=None, connector=None, system_database=None):        super(QFrame, self).__init__(parent)        self.parent = parent        self.tree_widget_style = "QTreeWidget{show-decoration-selected:2}" \                                 "QTreeWidget::item {border: 1px solid #d9d9d9;border-top-color: transparent;border-bottom-color: transparent;}" \                                 "QTreeWidget::item:hover {background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #e7effd, stop: 1 #cbdaf1),border: 1px solid #bfcde4;}" \                                 "QTreeWidget::item:selected {border: 1px solid #567dbc;}" \                                 "QTreeWidget::item:selected:active{background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #6ea1f1, stop: 1 #567dbc)}" \                                 "QTreeWidget::item:selected:!active {background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #6b9be8, stop: 1 #577fbf)}"        self.defaultFolderIcon = QIcon(":/folder.png")        self.fileUnloadedIcon = QIcon(":/fileunloaded.png")        self.fileLoadedIcon = QIcon(":/fileloaded.png")        self.defaultTitleIcon = QIcon(":/title.png")        self.font = QFont("Helvetica", 8, QFont.AnyStyle, True)        # init the attribute of the widget.        self.pos = None        self.file_path = None        self.parameterListWidget = TitleListWidget.TitleListWidget()        self.parameterListWidget.setStyleSheet("background:transparent; border: 0px solid gainsboro; color:aliceblue")        self.grayScale = QListWidgetItem()        self.frequency = QListWidgetItem()        self.ds_name = None        self.connector = connector        self.refAvailable = False        self.current_dataset_index = None        self.current_dataset_loaded_index = None        self.user_path_dir = None        self.target_vessel_index = 0        # set the widget size        self.setFixedWidth(250)        self.setStyleSheet("background:transparent; border: 0px solid gainsboro; color:aliceblue")        # define the tree widget        self.documentsWindow = QTreeWidget()        self.documentsWindow.setFont(self.font)        self.documentsWindow.setColumnCount(1)        self.documentsWindow.setHeaderHidden(1)        self.documentsWindow.verticalScrollBar().setStyleSheet("background-color: transparent")        self.documentsWindow.setFrameStyle(QFrame.NoFrame)        self.documentsWindow.setContextMenuPolicy(Qt.CustomContextMenu)        self.documentsWindow.setStyleSheet(self.tree_widget_style)        # header = QTreeWidgetItem(["Coronary_DTA"])        # self.documentsWindow.setHeaderItem(header)  # equal to setHeaderLabels(["DTA","Path"])        self.documentsWindow.setColumnCount(1)        # construct the control bar        self.construct_the_list_widget()        self.documentsWindow.setContextMenuPolicy(Qt.CustomContextMenu)        self.connect(self.documentsWindow, SIGNAL("customContextMenuRequested(QPoint)"),                     self.file_item_been_right_clicked)        self.patientInformationBoardLayout = QVBoxLayout(self)        self.patientInformationBoardLayout.addWidget(self.documentsWindow)        self.patientInformationBoardLayout.addWidget(self.parameterListWidget)        self.patientInformationBoardLayout.setSpacing(10)        self.patientInformationBoardLayout.setMargin(0)    def construct_the_list_widget(self):        self.grayScale.setText("gray scale")        self.frequency.setText("frequency")        self.parameterListWidget.addItem(self.grayScale)        self.parameterListWidget.addItem(self.frequency)    def load_mri_image_into_context(self):        # str(self.file_path.text(0)) is dataset XX        # step 1 load mri image into context according to the dataset name chosen        ref_data_seq = []        mhd_path = self.connector.load_mri_image_into_context_by_name(str(self.file_path.text(0)))        vessel_file_len = self.connector.get_number_of_vessel_folder(str(self.file_path.text(0)))        cont = 0        # parse the vessel 0, 1, 2 and 3.        while cont < vessel_file_len:            vessel_cont = self.connector.get_number_of_the_point_file(str(self.file_path.text(0)), cont)            # To identify whether there's a reference.txt            if vessel_cont < 5:                self.refAvailable = False            else:                vessel_data = self.connector.get_the_ref_data_of_dataset_by_index(str(self.file_path.text(0)), cont)                ref_data_seq.append(vessel_data)                self.refAvailable = True            cont += 1        if self.refAvailable is False:            reply = QMessageBox.question(None, "WARNING", "No reference here!", QMessageBox.Yes)            if reply == QMessageBox.Yes:                pass        # then we need to send the vessel path sequence and the mhd file path        self.trans_ds_index_to_button(self.current_dataset_index, self.refAvailable, self.ds_name)        # self.parent.get_img_viewer().update_vessel_ref_data(ref_data_seq, self.refAvailable)        self.parent.get_img_viewer().update_mri_image(mhd_path, self.refAvailable, ref_data_seq)        return True    # aimed to get the path of the reference path in the four vessels.    def load_vessel_into_context(self):        vessel_number = self.connector.get_number_of_vessel_folder(str(self.file_path.text(0)))        ref_data_seq = []        for cpt in range(vessel_number):            file_count = self.connector.get_number_of_the_point_file(str(self.file_path.text(0)), cpt)            if file_count < 5:                self.refAvailable = False            else:                vessel_data = self.connector.get_the_ref_data_of_dataset_by_index(str(self.file_path.text(0)), cpt)                ref_data_seq.append(vessel_data)                self.refAvailable = True        if self.refAvailable is False:            reply = QMessageBox.question(None, "WARNING", "No reference here!", QMessageBox.Yes)            if reply == QMessageBox.Yes:                pass        self.trans_ds_index_to_button(self.current_dataset_index, self.refAvailable, self.ds_name)        self.parent.get_img_viewer().update_vessel_ref_data(ref_data_seq, self.refAvailable)        self.set_table_data(self.refAvailable)        return True    def file_item_been_right_clicked(self, pos):        """ once an item in the qtreewidgetitem been right clicked ,an action window(include load, unload, delete)        will display to let the user manipulate the item:param pos: the current mouse position to position the actions        window        """        if self.documentsWindow.itemAt(pos) is None:            return        title = str(self.documentsWindow.itemAt(pos).text(0))        if "dataset" not in title:            return        self.current_dataset_index = int(title.split('dataset')[1])        if self.current_dataset_loaded_index is not int(title.split('dataset')[1]):            if title.__contains__("dataset"):                self.ds_name = title                self.file_path = self.documentsWindow.itemAt(pos)                menu = QMenu(self.documentsWindow)                menu.setStyleSheet("background-color:aliceBlue")                load_all_button = menu.addAction("load all")                self.connect(load_all_button, SIGNAL("triggered()"), self.load_all_context)                menu.show()                menu.exec_(QCursor.pos())        return    def trans_ds_index_to_button(self, ds_index, ref_flag, ds_name):        self.parent.trans_ds_index_to_button(ds_index, ref_flag, ds_name)    def set_table_data(self, flag):        point_path_seq = self.connector.get_vessels_from_dataset(self.ds_name)        self.parent.set_table_content(point_path_seq, flag)        # print vessels        return    def del_vessel_from_context(self):        return    def load_all_context(self):        if self.load_mri_image_into_context() is False:            return        if self.load_vessel_into_context() is False:            return        self.file_path.setIcon(0, self.fileLoadedIcon)        self.current_dataset_loaded_index = self.current_dataset_index    def find_data_set_existed(self):        self.documentsWindow.clear()        # first layer        for ds_name in self.connector.get_first_level_folders():            first_level_item = QTreeWidgetItem(self.documentsWindow)            first_level_item.setIcon(0, self.fileUnloadedIcon)            first_level_item.setText(0, ds_name)            # second layer            vessel_count = self.connector.get_number_of_vessel_folder(ds_name)            for count in xrange(vessel_count):                second_level_item = QTreeWidgetItem(first_level_item)                vessel_name = str("vessel_" + str(count))                second_level_item.setText(0, vessel_name)                # third layer                related_files = self.connector.get_number_of_the_point_file(ds_name, count)                # print related_files                for i in related_files:                    point = QTreeWidgetItem(second_level_item)                    point.setText(0, i)    def pass_vessel_to_patient_info_board(self, single_path_dir, vessel_number):        return    def update_info_board(self):        self.find_data_set_existed()